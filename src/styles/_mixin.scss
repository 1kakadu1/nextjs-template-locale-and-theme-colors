// colors. !!!! Outdated. We add variables to vars.css. Necessary for mixins remains in this file !!!!

// end colors

$maxWidthContainer: 1280;
$maxWidth: 1920;

@mixin adaptive-var($property, $startSize, $minSize, $type) {
    $addSize: $startSize - $minSize;
    @if $type == 1{
        #{$property}: $startSize + px;
        @media (max-width: #{$maxWidthContainer + px}) {
            #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px)/#{$maxWidthContainer - 320}));
        }
    } @else if $type == 2{
        #{$property}: $startSize + px;
        @media (min-width: #{$maxWidthContainer + px}) {
            #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px)/#{$maxWidth - 320}));
        }
    } @else{
        #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px)/#{$maxWidth - 320}));
    }
}

@mixin toRemProp($property, $value) {
    #{$property}: ($value / 16) + rem;
}

@mixin toViewportProp($property, $value, $type: vw) {
    #{$property}: (($value / $maxWidth)*100) + $type;
}

@mixin fontSize($valueMin, $valueMax) {
    font-size: clamp(#{toRem($valueMin)},#{toViewport($valueMax)},#{toRem($valueMax)});
}

@function toRem($value) {
    $remValue: calc($value / 16) ; 
    @return $remValue+rem;
}

@function toViewport($value, $type: vw) {
    $div:  calc($value / $maxWidth); //(($value / $maxWidth)*100) + $type;
    $value: calc($div * 100) + $type ;
    @return $value;
}

